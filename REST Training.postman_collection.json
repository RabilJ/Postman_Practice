{
	"info": {
		"_postman_id": "7f95f8e1-fad8-40c9-b83e-9a6628480b27",
		"name": "REST Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6379907"
	},
	"item": [
		{
			"name": "Get a joke!",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://official-joke-api.appspot.com/random_joke",
					"protocol": "https",
					"host": [
						"official-joke-api",
						"appspot",
						"com"
					],
					"path": [
						"random_joke"
					]
				},
				"description": "Random jokes on the house!"
			},
			"response": []
		},
		{
			"name": "Test GET request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.environment.get(\"post\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/?userId=1&id=3",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "id",
							"value": "3"
						}
					]
				},
				"description": "Request for testing"
			},
			"response": []
		},
		{
			"name": "Test POST request",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[ \r\n    {\r\n        \"userId\": 1,\r\n        \"id\": 3,\r\n        \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\r\n        \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\"\r\n    }\r\n]"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Test PUT Request",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[ \r\n    {\r\n        \"userId\": 1,\r\n        \"id\": 1010,\r\n        \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\r\n        \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\"\r\n    }\r\n]"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test DELETE Request",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Environment_Change_Json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Test\")\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"pm.environment.set(\"post\", 2);\r",
							"console.log(\"Environment variable post is equal to \", pm.environment.get(\"post\"))\r",
							"pm.environment.set(\"post\", 1);\r",
							"console.log(\"Environment variable post is equal to \", pm.environment.get(\"post\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlJson}}posts/{{post}}",
					"host": [
						"{{urlJson}}posts"
					],
					"path": [
						"{{post}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Imgur_GET",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessTokenUrl",
							"value": "https://api.imgur.com/oauth2/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://api.imgur.com/oauth2/authorize",
							"type": "string"
						},
						{
							"key": "redirect_uri",
							"value": "https://getpostman.com/oauth2/callback",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Testy API",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "810d231cf8326532e8ac391997421c43c191b9b7",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "cff6702ee6da16b",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlImgur}}",
					"host": [
						"{{urlImgur}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Homework_Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User id is 1\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.userId).to.eql(1);\r",
							"  pm.expect(responseJson.id).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"User nr 1 title is correct\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.title).to.eql(pm.environment.get(\"userIdTitle\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlJson}}posts/1",
					"host": [
						"{{urlJson}}posts"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Homework_Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User id is 1\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.postId).to.eql(1);\r",
							"  pm.expect(responseJson.id).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"User's email ending is @gardenerbiz\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   _.each(responseJson.Fee, (item) => {\r",
							"  pm.expect(item.email).to.include('@gardener.biz')})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlJson}}comments/1",
					"host": [
						"{{urlJson}}comments"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}